Test cases for BaseGeometry class:

Importing the class from its module:
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Creating an instance:
>>> bg = BaseGeometry()

Trying on normal case:
>>> bg.integer_validator("Uburebure", 48)

Another normal case:
>>> bg.integer_validator("width", 23)

None integer:
>>> bg.integer_validator("my_name", "Not_int")
Traceback (most recent call last):
...
TypeError: my_name must be an integer

Trying Negative value:
>>> bg.integer_validator("my_name", -23)
Traceback (most recent call last):
...
ValueError: my_name must be greater than 0

Trying Zero value:
>>> bg.integer_validator("my_name", 0)
Traceback (most recent call last):
...
ValueError: my_name must be greater than 0

Test for None:
>>> bg.integer_validator("age", None)
Traceback (most recent call last):
...
TypeError: age must be an integer

Test for dictionary:
>>> bg.integer_validator("age", {2, 4})
Traceback (most recent call last):
...
TypeError: age must be an integer

Test for boolian:
>>> bg.integer_validator("age", True)
Traceback (most recent call last):
...
TypeError: age must be an integer

Test for list:
>>> bg.integer_validator("age", [3, 5])
Traceback (most recent call last):
...
TypeError: age must be an integer

Test for tuple:
>>> bg.integer_validator("age", (3,))
Traceback (most recent call last):
...
TypeError: age must be an integer

Test for string:
>>> bg.integer_validator("age", "7")
Traceback (most recent call last):
...
TypeError: age must be an integer

Test for one argument:
>>> bg.integer_validator("age")
Traceback (most recent call last):
...
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

